[{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/conservation_analysis.html","id":"conservation-analysis-with-trajconserve","dir":"Articles","previous_headings":"","what":"Conservation Analysis with TrajConserve","title":"Conservation Analysis with TrajConserve","text":"vignette focuses conservation analysis capabilities TrajConserve package. ’ll explore identify conserved gene expression patterns across samples, batch conditions, experimental replicates.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/conservation_analysis.html","id":"what-is-conservation","dir":"Articles","previous_headings":"Conservation Analysis with TrajConserve","what":"What is Conservation?","title":"Conservation Analysis with TrajConserve","text":"context TrajConserve, “conservation” refers consistency gene expression patterns across different conditions. gene considered conserved : high expression values (high mean estimate) shows consistent expression across samples (low variability) Genes low expression high variability across samples considered non-conserved.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/conservation_analysis.html","id":"the-conservation-score","dir":"Articles","previous_headings":"Conservation Analysis with TrajConserve","what":"The Conservation Score","title":"Conservation Analysis with TrajConserve","text":"TrajConserve quantifies conservation using weighted score combines two key aspects: Mean Expression: Higher mean expression contributes higher conservation score Expression Variability: Lower variability (measured coefficient variation) contributes higher conservation score relative importance factors can adjusted using weight parameters.","code":""},{"path":[]},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/conservation_analysis.html","id":"basic-usage","dir":"Articles","previous_headings":"Conservation Analysis with TrajConserve > Computing Conservation Scores","what":"Basic Usage","title":"Conservation Analysis with TrajConserve","text":"","code":"library(TrajConserve)  # Assuming you have already run models and saved results to an HDF5 file h5_file <- \"trajectory_models.h5\"  # Calculate conservation scores with default parameters conservation_results <- calculate_conservation(   h5_file = h5_file,   metric = \"Estimate\" )  # View the results head(conservation_results)"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/conservation_analysis.html","id":"customizing-the-analysis","dir":"Articles","previous_headings":"Conservation Analysis with TrajConserve > Computing Conservation Scores","what":"Customizing the Analysis","title":"Conservation Analysis with TrajConserve","text":"can adjust several parameters customize conservation analysis:","code":"# Customize the weights and threshold conservation_results <- calculate_conservation(   h5_file = h5_file,   metric = \"Estimate\",   mean_weight = 0.7,           # Give more importance to mean expression   variability_weight = 0.3,    # Give less importance to variability   conservation_threshold = 0.8, # Stricter threshold for conserved genes   normalize_scores = TRUE      # Normalize scores to 0-1 range )"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/conservation_analysis.html","id":"understanding-the-results","dir":"Articles","previous_headings":"Conservation Analysis with TrajConserve","what":"Understanding the Results","title":"Conservation Analysis with TrajConserve","text":"calculate_conservation function returns data frame following columns: gene: Gene identifier mean_estimate: Mean expression value sd_estimate: Standard deviation expression cv: Coefficient variation (sd/mean) range_estimate: Range expression values mean_norm: Normalized mean value (normalize_scores = TRUE) cv_norm: Normalized inverse variability conservation_score: Overall conservation score is_conserved: Boolean indicating gene conserved (based threshold)","code":""},{"path":[]},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/conservation_analysis.html","id":"scatter-plot","dir":"Articles","previous_headings":"Conservation Analysis with TrajConserve > Visualizing Conservation","what":"Scatter Plot","title":"Conservation Analysis with TrajConserve","text":"scatter plot shows relationship mean expression variability:","code":"# Create a scatter plot plot_conservation(   conservation_results,   plot_type = \"scatter\",   highlight_n = 10,  # Highlight top/bottom 10 genes   file_path = \"conservation_scatter.pdf\"  # Optional: save to file )"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/conservation_analysis.html","id":"histogram","dir":"Articles","previous_headings":"Conservation Analysis with TrajConserve > Visualizing Conservation","what":"Histogram","title":"Conservation Analysis with TrajConserve","text":"histogram shows distribution conservation scores:","code":"# Create a histogram plot_conservation(   conservation_results,   plot_type = \"histogram\",   file_path = \"conservation_histogram.pdf\" )"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/conservation_analysis.html","id":"heatmap","dir":"Articles","previous_headings":"Conservation Analysis with TrajConserve > Visualizing Conservation","what":"Heatmap","title":"Conservation Analysis with TrajConserve","text":"creating heatmaps, ’ll need original expression data:","code":"# Extract the data estimate_matrix <- extract_hdf5_metric(h5_file, \"Estimate\")  # Create a heatmap # Note: Using pheatmap directly is recommended for complex heatmaps library(pheatmap)  # Create annotation for conserved vs non-conserved genes gene_type <- ifelse(conservation_results$is_conserved, \"Conserved\", \"Non-conserved\") gene_anno <- data.frame(   Conservation = factor(gene_type, levels = c(\"Conserved\", \"Non-conserved\")),   row.names = conservation_results$gene )  # Define colors for annotation anno_colors <- list(   Conservation = c(Conserved = \"blue\", `Non-conserved` = \"red\") )  # Create heatmap pheatmap(t(estimate_matrix),           annotation_row = gene_anno,          annotation_colors = anno_colors,          main = \"Expression Patterns of Conserved vs Non-conserved Genes\",          cluster_rows = TRUE,          cluster_cols = TRUE)"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/conservation_analysis.html","id":"comparing-conservation-across-different-metrics","dir":"Articles","previous_headings":"Conservation Analysis with TrajConserve","what":"Comparing Conservation Across Different Metrics","title":"Conservation Analysis with TrajConserve","text":"can calculate conservation different metrics HDF5 file:","code":"# Compare Estimate and Est.Error metrics estimate_conservation <- calculate_conservation(h5_file, \"Estimate\") error_conservation <- calculate_conservation(h5_file, \"Est.Error\")  # Compare the number of conserved genes table(estimate_conservation$is_conserved) table(error_conservation$is_conserved)  # Find genes conserved in both metrics both_conserved <- intersect(   estimate_conservation$gene[estimate_conservation$is_conserved],   error_conservation$gene[error_conservation$is_conserved] ) print(both_conserved)"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/conservation_analysis.html","id":"case-study-finding-conserved-genes-in-development","dir":"Articles","previous_headings":"Conservation Analysis with TrajConserve","what":"Case Study: Finding Conserved Genes in Development","title":"Conservation Analysis with TrajConserve","text":"Let’s walk complete example finding conserved genes developmental trajectory:","code":"library(TrajConserve) library(dplyr)  # 1. Load results from HDF5 file h5_file <- \"development_trajectory_models.h5\"  # 2. Calculate conservation scores cons_results <- calculate_conservation(   h5_file = h5_file,   mean_weight = 0.6,   variability_weight = 0.4,   conservation_threshold = 0.7 )  # 3. Analyze results # Number of conserved and non-conserved genes table(cons_results$is_conserved)  # Top 10 most conserved genes top_conserved <- cons_results %>%   filter(is_conserved) %>%   arrange(desc(conservation_score)) %>%   head(10)  print(top_conserved[, c(\"gene\", \"conservation_score\", \"mean_estimate\", \"cv\")])  # Bottom 10 least conserved genes least_conserved <- cons_results %>%   arrange(conservation_score) %>%   head(10)  print(least_conserved[, c(\"gene\", \"conservation_score\", \"mean_estimate\", \"cv\")])  # 4. Visualize results # Scatter plot plot_conservation(cons_results, plot_type = \"scatter\", highlight_n = 15)  # Extract data for heatmap data_matrix <- extract_hdf5_metric(h5_file, \"Estimate\")  # Get top 20 most conserved and 20 least conserved genes genes_to_plot <- c(   cons_results$gene[order(-cons_results$conservation_score)][1:20],   cons_results$gene[order(cons_results$conservation_score)][1:20] )  # Subset data plot_data <- data_matrix[, genes_to_plot]  # Create annotation data frame gene_type <- rep(\"Non-conserved\", length(genes_to_plot)) gene_type[genes_to_plot %in% cons_results$gene[cons_results$is_conserved]] <- \"Conserved\"  gene_anno <- data.frame(   Conservation = factor(gene_type, levels = c(\"Conserved\", \"Non-conserved\")),   row.names = genes_to_plot )  # Plot heatmap pheatmap(t(plot_data),          annotation_row = gene_anno,          scale = \"row\",          main = \"Expression Patterns Across Samples\",          fontsize_row = 8)"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/conservation_analysis.html","id":"biological-interpretation","dir":"Articles","previous_headings":"Conservation Analysis with TrajConserve","what":"Biological Interpretation","title":"Conservation Analysis with TrajConserve","text":"interpreting conservation results: Highly conserved genes likely represent core biological processes stable across conditions Condition-specific responses Technical variability Genes undergoing dynamic changes Housekeeping genes often highly conserved Genes involved stress response, immune function, developmental transitions may show lower conservation","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/conservation_analysis.html","id":"conclusion","dir":"Articles","previous_headings":"Conservation Analysis with TrajConserve","what":"Conclusion","title":"Conservation Analysis with TrajConserve","text":"Conservation analysis powerful tool identifying genes consistent expression patterns across experimental conditions. quantifying expression level variability, TrajConserve provides robust approach finding biologically meaningful patterns trajectory data.","code":""},{"path":[]},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/introduction.html","id":"overview","dir":"Articles","previous_headings":"TrajConserve","what":"Overview","title":"Introduction to TrajConserve","text":"TrajConserve R package designed analyzing gene expression trajectories identifying conserved expression patterns across experimental conditions. package implements Bayesian generalized additive models (GAMs) model gene expression pseudotime trajectories provides tools quantifying conservation expression patterns. package particularly useful : Modeling expression dynamics along developmental cell differentiation trajectories Identifying genes conserved divergent expression patterns across conditions Visualizing comparing trajectory models Storing retrieving model results HDF5 format","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/introduction.html","id":"features","dir":"Articles","previous_headings":"TrajConserve","what":"Features","title":"Introduction to TrajConserve","text":"Trajectory Modeling: Fit Bayesian GAMs gene expression data along pseudotime trajectories. Conservation Analysis: Quantify gene conservation based expression levels variability. HDF5 Integration: Store retrieve large model results efficiently. Visualization Tools: Create publication-ready plots model results conservation metrics.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/introduction.html","id":"installation","dir":"Articles","previous_headings":"TrajConserve","what":"Installation","title":"Introduction to TrajConserve","text":"can install TrajConserve GitHub:","code":"# Install devtools if you haven't already if (!requireNamespace(\"devtools\", quietly = TRUE))   install.packages(\"devtools\")  # Install the package from GitHub devtools::install_github(\"username/TrajConserve\")"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/introduction.html","id":"dependencies","dir":"Articles","previous_headings":"TrajConserve > Installation","what":"Dependencies","title":"Introduction to TrajConserve","text":"TrajConserve depends several packages, including: brms: Bayesian regression modeling via Stan rhdf5: HDF5 file handling ggplot2: visualization pheatmap: creating heatmaps data.table: efficient data manipulation","code":""},{"path":[]},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/introduction.html","id":"converting-seurat-data-to-trajectory-array","dir":"Articles","previous_headings":"TrajConserve > Basic Usage","what":"1. Converting Seurat data to trajectory array","title":"Introduction to TrajConserve","text":"","code":"library(TrajConserve) library(Seurat)  # Assuming 'seurat_obj' is your Seurat object with integrated data # and 'pseudotime' is a column in the metadata trajectory_data <- seurat_to_trajectory_array(   seurat_obj = seurat_obj,   assay = \"RNA\",   pseudotime_col = \"pseudotime\",   batch_col = \"sample_id\",   genes = c(\"Gene1\", \"Gene2\", \"Gene3\", \"Gene4\") )"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/introduction.html","id":"running-trajectory-models","dir":"Articles","previous_headings":"TrajConserve > Basic Usage","what":"2. Running trajectory models","title":"Introduction to TrajConserve","text":"","code":"# Run models for multiple genes result <- run_multiple_models(   data_array = trajectory_data,   output_file = \"trajectory_models.h5\",   family = \"negbinomial\",   n_cores = 4 )"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/introduction.html","id":"analyzing-conservation-of-gene-expression","dir":"Articles","previous_headings":"TrajConserve > Basic Usage","what":"3. Analyzing conservation of gene expression","title":"Introduction to TrajConserve","text":"","code":"# Calculate conservation scores conservation_results <- calculate_conservation(   h5_file = \"trajectory_models.h5\",   metric = \"Estimate\",   mean_weight = 0.6,   variability_weight = 0.4,   conservation_threshold = 0.7 )  # View conservation results head(conservation_results)  # Visualize conservation metrics plot_conservation(conservation_results, plot_type = \"scatter\")"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/introduction.html","id":"extracting-and-visualizing-metrics-from-hdf5-files","dir":"Articles","previous_headings":"TrajConserve > Basic Usage","what":"4. Extracting and visualizing metrics from HDF5 files","title":"Introduction to TrajConserve","text":"","code":"# Extract Estimate values estimates <- extract_hdf5_metric(\"trajectory_models.h5\", \"Estimate\")  # Create a heatmap plot_hdf5_heatmap(\"trajectory_models.h5\", \"Estimate\", scale = \"row\")"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/introduction.html","id":"example-workflow","dir":"Articles","previous_headings":"TrajConserve","what":"Example Workflow","title":"Introduction to TrajConserve","text":"complete workflow example preprocessing data analyzing conservation:","code":"library(TrajConserve) library(Seurat)  # 1. Prepare data seurat_obj <- readRDS(\"your_seurat_object.rds\") genes_of_interest <- c(\"Gene1\", \"Gene2\", \"Gene3\", \"Gene4\")  # 2. Convert Seurat data to trajectory array traj_array <- seurat_to_trajectory_array(   seurat_obj = seurat_obj,   assay = \"RNA\",   pseudotime_col = \"pseudotime\",   batch_col = \"condition\",   genes = genes_of_interest )  # 3. Run trajectory models output_file <- \"results/trajectory_models.h5\" run_multiple_models(   data_array = traj_array,   output_file = output_file,   family = \"negbinomial\",   n_cores = 4 )  # 4. Calculate conservation scores conservation_results <- calculate_conservation(   h5_file = output_file,   metric = \"Estimate\",   mean_weight = 0.6,   variability_weight = 0.4,   conservation_threshold = 0.7 )  # 5. Create output directory output_dir <- \"results/figures\" if (!dir.exists(output_dir)) {   dir.create(output_dir, recursive = TRUE) }  # 6. Visualize conservation # Scatter plot plot_conservation(   conservation_results,   plot_type = \"scatter\",   highlight_n = 10,   file_path = file.path(output_dir, \"conservation_scatter.pdf\") )  # Histogram plot_conservation(   conservation_results,   plot_type = \"histogram\",   file_path = file.path(output_dir, \"conservation_histogram.pdf\") )  # 7. Print top conserved genes top_conserved <- conservation_results[order(-conservation_results$conservation_score), ][1:10, ] print(top_conserved[, c(\"gene\", \"conservation_score\", \"is_conserved\", \"mean_estimate\", \"cv\")])"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/introduction.html","id":"advanced-topics","dir":"Articles","previous_headings":"TrajConserve","what":"Advanced Topics","title":"Introduction to TrajConserve","text":"advanced usage, please see vignettes: Customizing trajectory models Working HDF5 files Conservation analysis depth","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/stan_note.html","id":"important-stan-dependencies","dir":"Articles","previous_headings":"","what":"Important: Stan Dependencies","title":"Note About Stan Dependencies","text":"documentation site built without cmdstanr. package use rstan default backend. optimal performance TrajConserve package, can install cmdstanr set environment correctly. Please refer README complete installation instructions, especially section Stan Setup.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/workflow.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"TrajConserve Workflow","text":"vignette demonstrates complete workflow trajectory conservation analysis TrajConserve package. TrajConserve enables identification conserved non-conserved gene expression patterns across developmental trajectories single-cell RNA-seq data. workflow includes: Loading preparing data Converting Seurat objects trajectory arrays Running Bayesian GAM models gene expression trajectories Storing results HDF5 files efficiency Extracting visualizing model metrics Calculating conservation scores identify conserved genes","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/workflow.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"TrajConserve Workflow","text":"starting, make sure TrajConserve installed:","code":"# Install from GitHub devtools::install_github(\"GilbertHan1011/TrajConserve\")  # Install required dependencies if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"rhdf5\")  install.packages(c(\"brms\", \"ggplot2\", \"pheatmap\", \"ggrepel\"))"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/workflow.html","id":"setting-up-stan-important","dir":"Articles","previous_headings":"Installation","what":"Setting up Stan (Important!)","title":"TrajConserve Workflow","text":"TrajConserve relies Stan Bayesian modeling. default, uses rstan backend, optimal performance, strongly recommend installing configuring cmdstanr: settings ensure Stan can properly compile C++ toolchain. installing cmdstanr, can use setting backend = \"cmdstanr\" modeling functions. Without configurations, might encounter errors like:","code":"# Install cmdstanr from Stan R-universe (recommended method) install.packages(\"cmdstanr\", repos = c('https://stan-dev.r-universe.dev', getOption(\"repos\")))   cmdstanr::check_cmdstan_toolchain(fix = TRUE) options(timeout = 600)  # Set a longer timeout for downloading cmdstanr::install_cmdstan(cores = 2,overwrite=TRUE)"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/workflow.html","id":"load-required-packages","dir":"Articles","previous_headings":"","what":"Load Required Packages","title":"TrajConserve Workflow","text":"Start loading necessary packages:","code":"library(TrajConserve) library(Seurat) library(ggplot2) library(rhdf5)"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/workflow.html","id":"load-and-prepare-data","dir":"Articles","previous_headings":"","what":"Load and Prepare Data","title":"TrajConserve Workflow","text":"First, load prepared Seurat object containing single-cell data pseudotime information: Seurat object contain: - Expression data appropriate assay - Pseudotime values metadata - Project/sample/batch information metadata","code":"# Load example data from the package small_epi <- TrajConserve::load_example_data()  # Examine the structure small_epi"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/workflow.html","id":"convert-seurat-object-to-trajectory-array","dir":"Articles","previous_headings":"","what":"Convert Seurat Object to Trajectory Array","title":"TrajConserve Workflow","text":"Next, convert Seurat object format suitable trajectory modeling: seurat_to_trajectory_array function creates: - 3D array expression data organized gene, pseudotime, sample - Gene names sample metadata - Binned pseudotime values modeling","code":"trajectory_data <- seurat_to_trajectory_array(   seurat_obj = small_epi,   assay = \"originalexp\",      # Assay containing expression data   pseudo_col = \"pseudo\",      # Column with pseudotime values   project_col = \"Project\"     # Column with project/sample identifiers )  # Examine the structure of the trajectory data str(trajectory_data)"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/workflow.html","id":"test-a-single-trajectory-model","dir":"Articles","previous_headings":"","what":"Test a Single Trajectory Model","title":"TrajConserve Workflow","text":"running models multiple genes, ’s often helpful test single gene: creates test model one gene visualizes trajectory across samples. plot shows fitted GAM curve uncertainty intervals sample.","code":"# Select a gene index to test gene_idx <- 10  # Example gene index  # Run a test model for one gene model_test <- run_trajectory_model(trajectory_data$reshaped_data, gene_idx)  # Visualize the model results plot_results_brms(model_test)"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/workflow.html","id":"run-multiple-models-and-save-results","dir":"Articles","previous_headings":"","what":"Run Multiple Models and Save Results","title":"TrajConserve Workflow","text":"comprehensive analysis, run models multiple genes parallel: process: - Runs Bayesian GAM models selected gene - Executes parallel efficiency - Saves model metrics HDF5 file - Saves diagnostic plots PDFs - Saves model objects RDS files","code":"# Define output directory savedir <- \"./\"  # Run models for multiple genes TrajConserve::run_multiple_models(   trajectory_data$reshaped_data,   gene_indices = 1:20,      # First 20 genes (adjust as needed)   parallel = TRUE,   n_cores = 4,              # Adjust based on your computing resources   backend = \"rstan\",        # cmdstanr is highly recomendded   save_metrics = FALSE,   save_metrics_file = paste0(savedir, \"test1.hdf5\"),   save_plots = FALSE,   save_plots_dir = savedir,   save_models = FALSE,   save_models_dir = savedir )"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/workflow.html","id":"access-and-examine-hdf5-results","dir":"Articles","previous_headings":"","what":"Access and Examine HDF5 Results","title":"TrajConserve Workflow","text":"model fitting, can examine saved results: HDF5 file contains various metrics models, including: - Coefficient estimates - Standard errors - R-squared values - Significance measures - ","code":"# Open the HDF5 file h5_file <- paste0(savedir, \"test1.hdf5\") h5_test <- rhdf5::H5Fopen(h5_file)  # List the contents of the HDF5 file rhdf5::h5ls(h5_file)  # Examine the weight matrix h5_test$\"array_weights\"  # Close the HDF5 file rhdf5::H5Fclose(h5_test)"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/workflow.html","id":"extract-metrics-and-visualize-results","dir":"Articles","previous_headings":"","what":"Extract Metrics and Visualize Results","title":"TrajConserve Workflow","text":"TrajConserve provides functions extract metrics visualize results: extract_hdf5_metric function retrieves specific metric HDF5 file, plot_hdf5_heatmap creates visualization showing patterns across genes samples.","code":"# Extract metrics from the HDF5 file metric <- TrajConserve::extract_hdf5_metric(paste0(savedir,\"test1.hdf5\"))  # Examine the extracted metrics dim(metric) head(metric)  # Create a heatmap visualization of the metrics TrajConserve::plot_hdf5_heatmap(paste0(savedir, \"test1.hdf5\"))"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/workflow.html","id":"calculate-conservation-scores","dir":"Articles","previous_headings":"","what":"Calculate Conservation Scores","title":"TrajConserve Workflow","text":"Finally, calculate conservation scores identify conserved genes: conservation analysis: - Calculates conservation score based mean expression variability - Classifies genes conserved non-conserved - Provides visualizations interpret results","code":"# Calculate conservation scores conservation_results <- TrajConserve::calculate_conservation(   paste0(savedir,\"test1.hdf5\"),   metric = \"Estimate\",   mean_weight = 0.6,   variability_weight = 0.4,   conservation_threshold = 0.7 )  # Examine conservation results head(conservation_results)  # Count conserved and non-conserved genes table(conservation_results$is_conserved)  # Create visualizations of conservation results plot_conservation(   conservation_results,   plot_type = \"scatter\",   highlight_n = 10,   file_path = paste0(savedir, \"conservation_scatter.pdf\") )  plot_conservation(   conservation_results,   plot_type = \"histogram\",   file_path = paste0(savedir,\"conservation_histogram.pdf\") )"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/workflow.html","id":"advanced-visualization","dir":"Articles","previous_headings":"","what":"Advanced Visualization","title":"TrajConserve Workflow","text":"publication-quality visualizations, can combine conservation results expression patterns: creates heatmap shows expression patterns across samples, genes annotated conservation status.","code":"# Create a heatmap with gene conservation annotation library(pheatmap)  # Extract estimate matrix estimate_matrix <- extract_hdf5_metric( paste0(savedir,\"test1.hdf5\"), \"Estimate\")  # Create annotation data frame gene_type <- ifelse(conservation_results$is_conserved, \"Conserved\", \"Non-conserved\") gene_anno <- data.frame(   Conservation = factor(gene_type, levels = c(\"Conserved\", \"Non-conserved\")),   row.names = conservation_results$gene )  # Create heatmap pheatmap(t(estimate_matrix),           annotation_row = gene_anno,          main = \"Expression Patterns of Conserved vs Non-conserved Genes\",          filename = paste0(\"conservation_heatmap.pdf\"))"},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/workflow.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"TrajConserve Workflow","text":"workflow demonstrates complete process trajectory conservation analysis TrajConserve: prepared single-cell data pseudotime information Converted trajectory arrays suitable modeling Ran Bayesian GAM models characterize expression trajectories Stored results efficiently HDF5 files Extracted metrics created visualizations Calculated conservation scores identify conserved genes identified conserved genes represent expression patterns maintained across samples/conditions/species, potentially indicating functionally important developmental programs.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/workflow.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"TrajConserve Workflow","text":"identifying conserved non-conserved genes, might: Perform Gene Ontology enrichment analysis gene set Integrate types genomic data Compare conservation across different developmental stages Investigate specific gene modules interest greater detail","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/articles/workflow.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"TrajConserve Workflow","text":"","code":"sessionInfo()"},{"path":"https://GilbertHan1011.github.io/TrajConserve/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gilbert Han. Author, maintainer.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Han G (2025). TrajConserve: Trajectory Conservation Analysis Tools Single-Cell Data. R package version 0.1.0, https://GilbertHan1011.github.io/TrajConserve, https://github.com/GilbertHan1011/TrajConserve.","code":"@Manual{,   title = {TrajConserve: Trajectory Conservation Analysis Tools for Single-Cell Data},   author = {Gilbert Han},   year = {2025},   note = {R package version 0.1.0, https://GilbertHan1011.github.io/TrajConserve},   url = {https://github.com/GilbertHan1011/TrajConserve}, }"},{"path":"https://GilbertHan1011.github.io/TrajConserve/index.html","id":"trajconserve","dir":"","previous_headings":"","what":"Trajectory Conservation Analysis Tools for Single-Cell Data","title":"Trajectory Conservation Analysis Tools for Single-Cell Data","text":"Trajectory Conservation Analysis Tools Single-Cell Data","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Trajectory Conservation Analysis Tools for Single-Cell Data","text":"TrajConserve R package designed analyzing trajectory conservation single-cell data. enables identification conserved non-conserved gene expression patterns across developmental trajectories.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/index.html","id":"key-features","dir":"","previous_headings":"Overview","what":"Key Features","title":"Trajectory Conservation Analysis Tools for Single-Cell Data","text":"Trajectory Modeling: Bayesian GAM regression modeling expression trajectories Conservation Analysis: Quantify visualize gene conservation across samples HDF5 Integration: Efficient storage retrieval model results Visualization Tools: Publication-ready plots model results conservation metrics","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Trajectory Conservation Analysis Tools for Single-Cell Data","text":"detailed documentation, tutorials, examples, visit website. documentation website automatically built deployed using GitHub Actions whenever changes pushed main branch.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Trajectory Conservation Analysis Tools for Single-Cell Data","text":"","code":"# Install from GitHub devtools::install_github(\"GilbertHan1011/TrajConserve\")"},{"path":"https://GilbertHan1011.github.io/TrajConserve/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Trajectory Conservation Analysis Tools for Single-Cell Data","text":"TrajConserve depends several packages, including: brms: Bayesian regression modeling via Stan rhdf5: HDF5 file handling ggplot2: visualization Make sure install dependencies:","code":"# Install BiocManager if needed if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # Install rhdf5 BiocManager::install(\"rhdf5\")  # Install CRAN packages install.packages(c(\"brms\", \"ggplot2\", \"pheatmap\", \"ggrepel\"))"},{"path":"https://GilbertHan1011.github.io/TrajConserve/index.html","id":"stan-setup-important","dir":"","previous_headings":"Dependencies","what":"Stan Setup (Important)","title":"Trajectory Conservation Analysis Tools for Single-Cell Data","text":"TrajConserve uses Stan Bayesian modeling. default, uses rstan backend, optimal performance, strongly recommend installing configuring cmdstanr: settings ensure Stan can properly compile C++ environment. installing cmdstanr, can use setting backend = \"cmdstanr\" modeling functions. Without configuration, might encounter errors related C++17 detection TBB_CXX_TYPE settings.","code":"# Install cmdstanr from Stan R-universe (recommended method) install.packages(\"cmdstanr\", repos = c('https://stan-dev.r-universe.dev', getOption(\"repos\")))   # Install cmdstan cmdstanr::check_cmdstan_toolchain(fix = TRUE) options(timeout = 600)  # Set a longer timeout for downloading cmdstanr::install_cmdstan(cores = 2)"},{"path":[]},{"path":"https://GilbertHan1011.github.io/TrajConserve/index.html","id":"trajectory-modeling","dir":"","previous_headings":"Quick Start","what":"Trajectory Modeling","title":"Trajectory Conservation Analysis Tools for Single-Cell Data","text":"","code":"library(TrajConserve)  # Convert Seurat object to 3D trajectory array trajectory_data <- seurat_to_trajectory_array(   seurat_obj = your_seurat_object,   assay = \"RNA\",   pseudo_col = \"pseudotime\",   project_col = \"sample_id\",   genes = c(\"Gene1\", \"Gene2\", \"Gene3\", \"Gene4\") )  # Run multiple models and save to HDF5 # Using default rstan backend run_multiple_models(   data_array = trajectory_data$reshaped_data,   gene_indices = 1:20,   parallel = TRUE,   n_cores = 4,   save_metrics = TRUE,   save_metrics_file = \"trajectory_models.h5\",   save_plots = TRUE )  # Or, if cmdstanr is installed, you can use it for better performance: # run_multiple_models( #   data_array = trajectory_data$reshaped_data, #   gene_indices = 1:20, #   parallel = TRUE, #   n_cores = 4, #   save_metrics = TRUE, #   save_metrics_file = \"trajectory_models.h5\", #   save_plots = TRUE, #   backend = \"cmdstanr\" # )"},{"path":"https://GilbertHan1011.github.io/TrajConserve/index.html","id":"conservation-analysis","dir":"","previous_headings":"Quick Start","what":"Conservation Analysis","title":"Trajectory Conservation Analysis Tools for Single-Cell Data","text":"","code":"# Calculate conservation scores conservation_results <- calculate_conservation(   h5_file = \"trajectory_models.h5\",   metric = \"Estimate\",   mean_weight = 0.6,   variability_weight = 0.4,   conservation_threshold = 0.7 )  # View results head(conservation_results)  # Create visualizations # Scatter plot plot_conservation(   conservation_results,   plot_type = \"scatter\",   highlight_n = 10,   file_path = \"figures/conservation_scatter.pdf\" )  # Histogram plot_conservation(   conservation_results,   plot_type = \"histogram\",   file_path = \"figures/conservation_histogram.pdf\" )  # Extract data for heatmap estimate_matrix <- extract_hdf5_metric(\"trajectory_models.h5\", \"Estimate\")  # Create heatmap using pheatmap library(pheatmap) gene_type <- ifelse(conservation_results$is_conserved, \"Conserved\", \"Non-conserved\") gene_anno <- data.frame(   Conservation = factor(gene_type, levels = c(\"Conserved\", \"Non-conserved\")),   row.names = conservation_results$gene )  # Create heatmap pheatmap(t(estimate_matrix),           annotation_row = gene_anno,          main = \"Expression Patterns of Conserved vs Non-conserved Genes\")"},{"path":"https://GilbertHan1011.github.io/TrajConserve/index.html","id":"key-functions","dir":"","previous_headings":"","what":"Key Functions","title":"Trajectory Conservation Analysis Tools for Single-Cell Data","text":"Trajectory Analysis - seurat_to_trajectory_array(): Converts Seurat object 3D trajectory array - bayesian_gam_regression_nb_shape(): Fits Bayesian GAM model negative binomial distribution - run_multiple_models(): Runs models multiple genes - plot_results_brms(): Visualizes model results Conservation Analysis - calculate_conservation(): Calculates conservation scores genes - plot_conservation(): Creates visualizations conservation results - extract_hdf5_metric(): Extracts metrics HDF5 files HDF5 Utilities - extract_hdf5_metric(): Extract metrics HDF5 files - plot_hdf5_heatmap(): Create heatmaps HDF5 data","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/index.html","id":"website-development","dir":"","previous_headings":"","what":"Website Development","title":"Trajectory Conservation Analysis Tools for Single-Cell Data","text":"documentation website automatically built deployed using GitHub Actions whenever changes pushed main branch. build documentation website locally testing: Alternatively, run included script: automated GitHub Actions workflow defined .github/workflows/pkgdown.yml.","code":"# Install pkgdown if needed install.packages(\"pkgdown\")  # Build the site pkgdown::build_site() Rscript build_site.R"},{"path":"https://GilbertHan1011.github.io/TrajConserve/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Trajectory Conservation Analysis Tools for Single-Cell Data","text":"package released MIT License.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/bayesian_gam_regression_nb_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"This function fits a Bayesian Generalized Additive Model with negative binomial distribution and array-specific shape parameters to model gene expression trajectories. — bayesian_gam_regression_nb_shape","title":"This function fits a Bayesian Generalized Additive Model with negative binomial distribution and array-specific shape parameters to model gene expression trajectories. — bayesian_gam_regression_nb_shape","text":"function fits Bayesian Generalized Additive Model negative binomial distribution array-specific shape parameters model gene expression trajectories.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/bayesian_gam_regression_nb_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function fits a Bayesian Generalized Additive Model with negative binomial distribution and array-specific shape parameters to model gene expression trajectories. — bayesian_gam_regression_nb_shape","text":"","code":"bayesian_gam_regression_nb_shape(   x,   y,   array_idx,   n_knots = 5,   n_samples = 2000,   backend = \"rstan\" )"},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/bayesian_gam_regression_nb_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function fits a Bayesian Generalized Additive Model with negative binomial distribution and array-specific shape parameters to model gene expression trajectories. — bayesian_gam_regression_nb_shape","text":"x Numeric vector pseudotime values y Numeric vector gene expression counts array_idx Vector array/batch identifiers n_knots Number knots cubic regression spline (default: 5) n_samples Number MCMC samples (default: 2000) backend Backend use Stan models (\"rstan\" \"cmdstanr\", defaults \"rstan\")","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/bayesian_gam_regression_nb_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function fits a Bayesian Generalized Additive Model with negative binomial distribution and array-specific shape parameters to model gene expression trajectories. — bayesian_gam_regression_nb_shape","text":"list containing: fit fitted brms model object array_weights Data frame array-specific weights based shape parameters diagnostics Data frame array-specific diagnostics data data used fitting","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/bin_pseudotime.html","id":null,"dir":"Reference","previous_headings":"","what":"This function bins pseudotime values into a specified number of equal-width bins. — bin_pseudotime","title":"This function bins pseudotime values into a specified number of equal-width bins. — bin_pseudotime","text":"function bins pseudotime values specified number equal-width bins.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/bin_pseudotime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function bins pseudotime values into a specified number of equal-width bins. — bin_pseudotime","text":"","code":"bin_pseudotime(x, n_bins = 100)"},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/bin_pseudotime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function bins pseudotime values into a specified number of equal-width bins. — bin_pseudotime","text":"x Numeric vector pseudotime values n_bins Number bins create (default: 100)","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/bin_pseudotime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function bins pseudotime values into a specified number of equal-width bins. — bin_pseudotime","text":"integer vector bin assignments","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/calculate_bin_means.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Bin Means Fast — calculate_bin_means","title":"Calculate Bin Means Fast — calculate_bin_means","text":"function calculates mean expression gene bin.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/calculate_bin_means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Bin Means Fast — calculate_bin_means","text":"","code":"calculate_bin_means(expression_matrix, bin_labels)"},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/calculate_bin_means.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Bin Means Fast — calculate_bin_means","text":"expression_matrix gene expression matrix (genes rows, cells columns) bin_labels vector bin labels cell","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/calculate_bin_means.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Bin Means Fast — calculate_bin_means","text":"matrix mean expressions (genes rows, bins columns)","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/calculate_conservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Gene Conservation Scores — calculate_conservation","title":"Calculate Gene Conservation Scores — calculate_conservation","text":"function calculates conservation scores genes based Estimate values variability estimates across samples/batches. Genes high estimate values low variability considered conserved, genes low estimates high variability considered non-conserved.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/calculate_conservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Gene Conservation Scores — calculate_conservation","text":"","code":"calculate_conservation(   h5_file,   metric = \"Estimate\",   mean_weight = 0.5,   variability_weight = 0.5,   conservation_threshold = 0.6,   normalize_scores = TRUE )"},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/calculate_conservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Gene Conservation Scores — calculate_conservation","text":"h5_file Path HDF5 file containing model results metric Name metric use conservation calculation (default: \"Estimate\") mean_weight Weight mean component score calculation (default: 0.5) variability_weight Weight variability component score calculation (default: 0.5) conservation_threshold Threshold classifying genes conserved (default: 0.6) normalize_scores Whether normalize scores 0-1 range (default: TRUE)","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/calculate_conservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Gene Conservation Scores — calculate_conservation","text":"data frame gene names, conservation scores, classification, metrics","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/examine_trajectory_tail.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Quality of Trajectory Tail — examine_trajectory_tail","title":"Check Quality of Trajectory Tail — examine_trajectory_tail","text":"function examines tail trajectory ensure sufficient data points.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/examine_trajectory_tail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Quality of Trajectory Tail — examine_trajectory_tail","text":"","code":"examine_trajectory_tail(metaDf, n_bin = 100, tail_width = 0.3, tail_num = 0.02)"},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/examine_trajectory_tail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Quality of Trajectory Tail — examine_trajectory_tail","text":"metaDf Data frame containing batch pseudotime bin information n_bin Number bins used pseudotime binning (default: 100) tail_width Width tail examine proportion (default: 0.3) tail_num Minimum proportion bins required tail (default: 0.02)","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/examine_trajectory_tail.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Quality of Trajectory Tail — examine_trajectory_tail","text":"Character vector batch names pass tail quality check","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/extract_hdf5_metric.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Metric from HDF5 File — extract_hdf5_metric","title":"Extract Metric from HDF5 File — extract_hdf5_metric","text":"function extracts specific metric HDF5 file containing model results. returns matrix genes columns arrays/samples rows. function extracts metric values (\"Estimate\", \"Est.Error\", etc.) HDF5 file created run_multiple_models function organizes matrix rows groups/batches columns genes.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/extract_hdf5_metric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Metric from HDF5 File — extract_hdf5_metric","text":"","code":"extract_hdf5_metric(h5_file, metric = \"Estimate\")  extract_hdf5_metric(h5_file, metric = \"Estimate\")"},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/extract_hdf5_metric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Metric from HDF5 File — extract_hdf5_metric","text":"h5_file Path HDF5 file metric Name metric extract (default: \"Estimate\")","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/extract_hdf5_metric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Metric from HDF5 File — extract_hdf5_metric","text":"matrix arrays/samples rows genes columns matrix extracted values rows groups/batches columns genes","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/plot_conservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Conservation Results — plot_conservation","title":"Plot Conservation Results — plot_conservation","text":"function creates visualizations gene conservation analysis results.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/plot_conservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Conservation Results — plot_conservation","text":"","code":"plot_conservation(   conservation_results,   plot_type = \"scatter\",   highlight_n = 5,   original_data = NULL,   gene_subset = NULL,   file_path = NULL )"},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/plot_conservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Conservation Results — plot_conservation","text":"conservation_results Output calculate_conservation function plot_type Type plot create: \"scatter\", \"histogram\", \"heatmap\" (default: \"scatter\") highlight_n Number top bottom conserved genes highlight (default: 5) original_data Original data matrix heatmap (required heatmap plot) gene_subset Subset genes include heatmap (default: genes) file_path Path save plot (optional)","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/plot_conservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Conservation Results — plot_conservation","text":"ggplot2 object creates plot file","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/plot_hdf5_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Heatmap from HDF5 Metrics — plot_hdf5_heatmap","title":"Plot Heatmap from HDF5 Metrics — plot_hdf5_heatmap","text":"function creates heatmap visualization metrics extracted HDF5 file.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/plot_hdf5_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Heatmap from HDF5 Metrics — plot_hdf5_heatmap","text":"","code":"plot_hdf5_heatmap(   h5_file,   metric = \"Estimate\",   cluster_rows = TRUE,   cluster_cols = TRUE,   scale = \"none\",   ... )"},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/plot_hdf5_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Heatmap from HDF5 Metrics — plot_hdf5_heatmap","text":"h5_file Path HDF5 file metric Name metric visualize (default: \"Estimate\") cluster_rows Whether cluster rows heatmap (default: TRUE) cluster_cols Whether cluster columns heatmap (default: TRUE) scale Character indicating values centered scaled either row column direction (default: \"none\") ... Additional arguments passed pheatmap","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/plot_hdf5_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Heatmap from HDF5 Metrics — plot_hdf5_heatmap","text":"heatmap plot object","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/plot_results_brms.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Results from Bayesian GAM Regression — plot_results_brms","title":"Plot Results from Bayesian GAM Regression — plot_results_brms","text":"function generates diagnostic plots Bayesian GAM regression model.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/plot_results_brms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Results from Bayesian GAM Regression — plot_results_brms","text":"","code":"plot_results_brms(fit)"},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/plot_results_brms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Results from Bayesian GAM Regression — plot_results_brms","text":"fit model fit object returned bayesian_gam_regression_nb_shape","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/plot_results_brms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Results from Bayesian GAM Regression — plot_results_brms","text":"grid arrangement plots","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/prepare_data_for_gam.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare 3D Array Data for GAM Modeling — prepare_data_for_gam","title":"Prepare 3D Array Data for GAM Modeling — prepare_data_for_gam","text":"function prepares data 3D array GAM modeling.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/prepare_data_for_gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare 3D Array Data for GAM Modeling — prepare_data_for_gam","text":"","code":"prepare_data_for_gam(gene_data)"},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/prepare_data_for_gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare 3D Array Data for GAM Modeling — prepare_data_for_gam","text":"gene_data 2D slice 3D array single gene [batch, time]","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/prepare_data_for_gam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare 3D Array Data for GAM Modeling — prepare_data_for_gam","text":"list containing: x Vector pseudotime values y Vector expression values array_idx Vector batch indices","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/reshape_to_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape Matrix to 3D Array — reshape_to_3d","title":"Reshape Matrix to 3D Array — reshape_to_3d","text":"function reshapes 2D matrix 3D array trajectory analysis.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/reshape_to_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape Matrix to 3D Array — reshape_to_3d","text":"","code":"reshape_to_3d(matrix_data, prefixes, numbers, n_bins = 100)"},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/reshape_to_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape Matrix to 3D Array — reshape_to_3d","text":"matrix_data Input matrix (genes rows, bin-batch combinations columns) prefixes Vector batch prefixes column numbers Vector bin numbers column n_bins Total number bins (default: 100)","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/reshape_to_3d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape Matrix to 3D Array — reshape_to_3d","text":"3D array dimensions [batch, pseudotime, gene]","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/run_multiple_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Trajectory Models for Multiple Genes — run_multiple_models","title":"Run Trajectory Models for Multiple Genes — run_multiple_models","text":"function runs Bayesian GAM models multiple genes across trajectory.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/run_multiple_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Trajectory Models for Multiple Genes — run_multiple_models","text":"","code":"run_multiple_models(   data_array,   gene_indices = NULL,   n_knots = 5,   n_samples = 2000,   parallel = FALSE,   n_cores = 1,   save_metrics = FALSE,   save_metrics_file = \"model_metrics.h5\",   save_plots = FALSE,   save_plots_dir = \"model_plots\",   save_models = FALSE,   save_models_dir = \"model_files\",   backend = \"rstan\" )"},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/run_multiple_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Trajectory Models for Multiple Genes — run_multiple_models","text":"data_array 3D array expression values [batch, time, gene] gene_indices Indices genes model (default: genes) n_knots Number knots cubic regression spline (default: 5) n_samples Number MCMC samples (default: 2000) parallel Whether run parallel (default: FALSE) n_cores Number cores use parallel processing (default: 1) save_metrics Whether save array weights HDF5 file (default: FALSE) save_metrics_file File path save metrics HDF5 format (default: \"model_metrics.h5\") save_plots Whether save plot results PDF files (default: FALSE) save_plots_dir Directory save plot PDFs (default: \"model_plots\") save_models Whether save models directory (default: FALSE) save_models_dir Directory save model files (default: \"model_files\") backend Backend use Stan models (\"rstan\" \"cmdstanr\", defaults \"rstan\")","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/run_multiple_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Trajectory Models for Multiple Genes — run_multiple_models","text":"list fitted model objects","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/run_trajectory_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Bayesian GAM Model for a Single Gene — run_trajectory_model","title":"Run Bayesian GAM Model for a Single Gene — run_trajectory_model","text":"function runs Bayesian GAM model single gene across trajectory.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/run_trajectory_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Bayesian GAM Model for a Single Gene — run_trajectory_model","text":"","code":"run_trajectory_model(   data_array,   gene_index,   n_knots = 5,   n_samples = 2000,   backend = \"rstan\" )"},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/run_trajectory_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Bayesian GAM Model for a Single Gene — run_trajectory_model","text":"data_array 3D array expression values [batch, time, gene] gene_index Index gene model 3D array n_knots Number knots cubic regression spline (default: 5) n_samples Number MCMC samples (default: 2000) backend Backend use Stan models (\"rstan\" \"cmdstanr\", defaults \"rstan\")","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/run_trajectory_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Bayesian GAM Model for a Single Gene — run_trajectory_model","text":"fitted model object bayesian_gam_regression_nb_shape","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/seurat_to_trajectory_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Seurat Object to 3D Expression Array — seurat_to_trajectory_array","title":"Convert Seurat Object to 3D Expression Array — seurat_to_trajectory_array","text":"function processes Seurat object create 3D array binned expression data.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/seurat_to_trajectory_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Seurat Object to 3D Expression Array — seurat_to_trajectory_array","text":"","code":"seurat_to_trajectory_array(   seurat_obj,   assay = \"RNA\",   slot = \"data\",   pseudo_col,   project_col,   thred = 0.1,   batch_thred = 0.3,   n_bin = 100,   ensure_tail = TRUE,   tail_width = 0.3,   tail_num = 0.02 )"},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/seurat_to_trajectory_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Seurat Object to 3D Expression Array — seurat_to_trajectory_array","text":"seurat_obj Seurat object assay Assay use expression data (default: \"RNA\") slot Slot use expression data (default: \"data\") pseudo_col Column name meta.data containing pseudotime values project_col Column name meta.data containing batch/project information thred Threshold gene filtering (proportion non-zero bins) (default: 0.1) batch_thred Threshold batch filtering (proportion bins present) (default: 0.3) n_bin Number bins pseudotime (default: 100) ensure_tail Whether ensure quality trajectory tail (default: TRUE) tail_width Width trajectory tail examine (default: 0.3) tail_num Minimum proportion bins required tail (default: 0.02)","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/seurat_to_trajectory_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Seurat Object to 3D Expression Array — seurat_to_trajectory_array","text":"list containing processed data","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/trajConserve.html","id":null,"dir":"Reference","previous_headings":"","what":"TrajConserve: Trajectory Conservation Analysis Tools for Single-Cell Data — trajConserve","title":"TrajConserve: Trajectory Conservation Analysis Tools for Single-Cell Data — trajConserve","text":"Tools analyzing trajectory conservation single-cell data. package provides functions Bayesian GAM regression modeling expression trajectories, pseudotime binning transformation, visualization trajectory models.","code":""},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/trajConserve.html","id":"key-functions","dir":"Reference","previous_headings":"","what":"Key Functions","title":"TrajConserve: Trajectory Conservation Analysis Tools for Single-Cell Data — trajConserve","text":"seurat_to_trajectory_array - Convert Seurat object 3D trajectory array bayesian_gam_regression_nb_shape - Fit Bayesian GAM regression model run_multiple_models - Run models multiple genes parallel plot_results_brms - Visualize model results","code":""},{"path":[]},{"path":"https://GilbertHan1011.github.io/TrajConserve/reference/trajConserve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"TrajConserve: Trajectory Conservation Analysis Tools for Single-Cell Data — trajConserve","text":"Gilbert Han","code":""}]
